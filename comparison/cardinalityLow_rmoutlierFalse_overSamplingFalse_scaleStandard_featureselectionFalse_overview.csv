;model;mean;sd;specs
0;naive_bayes1;0.4879910714285714;0.0038697915951373804;GaussianNB()
1;naive_bayes2;;;MultinomialNB()
2;naive_bayes3;;;ComplementNB()
3;logistic_regression_1;0.8492857142857144;0.006506840003929286;LogisticRegression()
4;logistic_regression_after_gs;0.849017857142857;0.006470288747775652;LogisticRegression(C=1, class_weight={0: 1.0, 1: 1.0}, random_state=0, solver='liblinear', verbose=False)
5;logistic_regression_after_rs;0.8495535714285716;0.0064446722973637675;LogisticRegression(C=6, class_weight={0: 1.0, 1: 1.0}, multi_class='ovr', random_state=0, solver='saga', verbose=False)
6;knn_1;0.8371875000000001;0.0037711985860612147;KNeighborsClassifier()
7;knn_after_gs;0.8458035714285714;0.005826534242198382;KNeighborsClassifier(algorithm='brute', n_neighbors=11)
8;bagging_knn;0.8381696428571429;0.004561442776587434;BaggingClassifier(base_estimator=KNeighborsClassifier(), random_state=0)
9;svc_1;0.8542410714285713;0.004701297720321689;SVC()
10;svc_after_gs;0.8542410714285713;0.004701297720321689;SVC(C=1, probability=True, random_state=0)
11;dt;0.8208928571428572;0.004262399379385727;DecisionTreeClassifier()
12;random_forest;0.8541964285714286;0.003728146356448732;RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)
13;boosted_tree;0.869375;0.004742239901746236;GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
14;boosted_tree_after_gs;0.8701785714285715;0.0041750022913350565;GradientBoostingClassifier(max_depth=6, max_features='auto', min_impurity_decrease=0.1, min_samples_split=3, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
15;adaboost;0.8589285714285715;0.004316758840583417;AdaBoostClassifier(random_state=5)
16;mlp;0.8539285714285715;0.00555548026451247;MLPClassifier(alpha=1e-06, early_stopping=True, max_iter=1000, random_state=0)
17;mlp_after_gs;0.854642857142857;0.005374599534203565;MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)
18;ensemble1;0.8659375;0.004640710355327138;VotingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], voting='soft')
19;ensemble2;;;
20;stacking1;0.8706696428571428;0.0038158545797068125;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=LogisticRegression())
21;stacking2;0.8695982142857144;0.0034678047296318776;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=SVC())
22;stacking3;0.8698214285714286;0.003365728004459084;StackingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)), ('knn', KNeighborsClassifier(algorithm='brute', n_neighbors=11))], final_estimator=SVC())
