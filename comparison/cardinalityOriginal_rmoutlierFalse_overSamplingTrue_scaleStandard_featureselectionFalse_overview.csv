;model;mean;sd;specs
0;naive_bayes1;0.6955648717170554;0.010192314540342166;GaussianNB()
1;naive_bayes2;;;MultinomialNB()
2;naive_bayes3;;;ComplementNB()
3;logistic_regression_1;0.826350432732087;0.0047600752569327874;LogisticRegression()
4;logistic_regression_after_gs;0.8261748871994428;0.004937649104355993;LogisticRegression(C=1, class_weight={0: 1.0, 1: 1.0}, random_state=0, solver='liblinear', verbose=False)
5;logistic_regression_after_rs;0.8264674687944499;0.0050964563491401535;LogisticRegression(C=6, class_weight={0: 1.0, 1: 1.0}, multi_class='ovr', random_state=0, solver='saga', verbose=False)
6;knn_1;0.8524491964097299;0.008658174480689037;KNeighborsClassifier()
7;knn_after_gs;0.842735370171171;0.008320331164302565;KNeighborsClassifier(algorithm='brute', n_neighbors=11)
8;bagging_knn;0.8572183025190876;0.008765809358726255;BaggingClassifier(base_estimator=KNeighborsClassifier(), random_state=0)
9;svc_1;0.8464805798126276;0.010143615561396754;SVC()
10;svc_after_gs;0.8464805798126276;0.010143615561396754;SVC(C=1, probability=True, random_state=0)
11;dt;0.8574542751635882;0.04785427364290525;DecisionTreeClassifier()
12;random_forest;0.8140328216340789;0.010211536753914945;RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)
13;boosted_tree;0.8882634514209595;0.046968283888867264;GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
14;boosted_tree_after_gs;0.8893460371380397;0.04717155454663345;GradientBoostingClassifier(max_depth=6, max_features='auto', min_impurity_decrease=0.1, min_samples_split=3, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
15;adaboost;0.8512501439301294;0.018688779664764066;AdaBoostClassifier(random_state=5)
16;mlp;0.854439134784092;0.010665280571527548;MLPClassifier(alpha=1e-06, early_stopping=True, max_iter=1000, random_state=0)
17;mlp_after_gs;0.8506940407147837;0.009707484718017674;MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)
18;ensemble1;0.8786949079339423;0.020988722029586158;VotingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], voting='soft')
19;ensemble2;;;
20;stacking1;0.886712674369479;0.0445593328965513;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=LogisticRegression())
21;stacking2;0.8854546116069537;0.04615077897385251;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=SVC())
22;stacking3;0.8868882669870726;0.048004726546433764;StackingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)), ('knn', KNeighborsClassifier(algorithm='brute', n_neighbors=11))], final_estimator=SVC())
