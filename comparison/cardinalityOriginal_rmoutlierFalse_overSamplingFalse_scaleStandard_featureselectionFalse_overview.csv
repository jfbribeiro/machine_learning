;model;mean;sd;specs
0;naive_bayes1;0.5095089285714286;0.039689132016902336;GaussianNB()
1;naive_bayes2;;;MultinomialNB()
2;naive_bayes3;;;ComplementNB()
3;logistic_regression_1;0.8494642857142857;0.005315312880763297;LogisticRegression()
4;logistic_regression_after_gs;0.8495982142857142;0.005428101483418124;LogisticRegression(C=1, class_weight={0: 1.0, 1: 1.0}, random_state=0, solver='liblinear', verbose=False)
5;logistic_regression_after_rs;0.8494196428571428;0.005486895915334511;LogisticRegression(C=6, class_weight={0: 1.0, 1: 1.0}, multi_class='ovr', random_state=0, solver='saga', verbose=False)
6;knn_1;0.8327678571428571;0.004340700092832744;KNeighborsClassifier()
7;knn_after_gs;0.8390625;0.0041400082569177455;KNeighborsClassifier(algorithm='brute', n_neighbors=11)
8;bagging_knn;0.8348214285714286;0.005509369917491095;BaggingClassifier(base_estimator=KNeighborsClassifier(), random_state=0)
9;svc_1;0.8551785714285713;0.004511800711829517;SVC()
10;svc_after_gs;0.8551785714285713;0.004511800711829517;SVC(C=1, probability=True, random_state=0)
11;dt;0.8154910714285715;0.0007935887872603051;DecisionTreeClassifier()
12;random_forest;0.8458035714285714;0.003991480883438796;RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)
13;boosted_tree;0.8688392857142857;0.004580191795957389;GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
14;boosted_tree_after_gs;0.8706249999999999;0.004483441047058505;GradientBoostingClassifier(max_depth=6, max_features='auto', min_impurity_decrease=0.1, min_samples_split=3, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
15;adaboost;0.8583035714285714;0.003655265980439073;AdaBoostClassifier(random_state=5)
16;mlp;0.854642857142857;0.0038387665761974053;MLPClassifier(alpha=1e-06, early_stopping=True, max_iter=1000, random_state=0)
17;mlp_after_gs;0.8569642857142856;0.004143376660775706;MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)
18;ensemble1;0.8657142857142859;0.003029799910885197;VotingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], voting='soft')
19;ensemble2;;;
20;stacking1;0.8695089285714286;0.0042694072200018625;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=LogisticRegression())
21;stacking2;0.8698660714285713;0.004202123794910765;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=SVC())
22;stacking3;0.8701339285714285;0.0036306474305977565;StackingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)), ('knn', KNeighborsClassifier(algorithm='brute', n_neighbors=11))], final_estimator=SVC())
