;model;mean;sd;specs
0;naive_bayes1;0.7829464285714286;0.003946792161660795;GaussianNB()
1;naive_bayes2;;;MultinomialNB()
2;naive_bayes3;;;ComplementNB()
3;logistic_regression_1;0.8482589285714287;0.004748539651990978;LogisticRegression()
4;logistic_regression_after_gs;0.8485267857142859;0.004778245771521299;LogisticRegression(C=1, class_weight={0: 1.0, 1: 1.0}, random_state=0, solver='liblinear', verbose=False)
5;logistic_regression_after_rs;0.8483035714285714;0.004640710355327186;LogisticRegression(C=6, class_weight={0: 1.0, 1: 1.0}, multi_class='ovr', random_state=0, solver='saga', verbose=False)
6;knn_1;0.8333035714285714;0.006390948937077097;KNeighborsClassifier()
7;knn_after_gs;0.8417410714285714;0.0058803303001426005;KNeighborsClassifier(algorithm='brute', n_neighbors=11)
8;bagging_knn;0.8362946428571428;0.007128333448647153;BaggingClassifier(base_estimator=KNeighborsClassifier(), random_state=0)
9;svc_1;0.8522767857142858;0.004629531012744089;SVC()
10;svc_after_gs;0.8522767857142858;0.004629531012744089;SVC(C=1, probability=True, random_state=0)
11;dt;0.8216071428571429;0.001963270841722857;DecisionTreeClassifier()
12;random_forest;0.8539285714285715;0.004438766347046625;RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)
13;boosted_tree;0.8665178571428571;0.0049086846455012375;GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
14;boosted_tree_after_gs;0.8676785714285714;0.005663487941477898;GradientBoostingClassifier(max_depth=6, max_features='auto', min_impurity_decrease=0.1, min_samples_split=3, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
15;adaboost;0.8583035714285716;0.004143376660775754;AdaBoostClassifier(random_state=5)
16;mlp;0.8508035714285714;0.0033514864962720693;MLPClassifier(alpha=1e-06, early_stopping=True, max_iter=1000, random_state=0)
17;mlp_after_gs;0.8547767857142858;0.006162654973834798;MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)
18;ensemble1;0.8645535714285714;0.004424825604772817;VotingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], voting='soft')
19;ensemble2;;;
20;stacking1;0.8677232142857143;0.005279572324400103;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=LogisticRegression())
21;stacking2;0.8679464285714286;0.00460189693030416;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=SVC())
22;stacking3;0.8676339285714285;0.005099848061962442;StackingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)), ('knn', KNeighborsClassifier(algorithm='brute', n_neighbors=11))], final_estimator=SVC())
