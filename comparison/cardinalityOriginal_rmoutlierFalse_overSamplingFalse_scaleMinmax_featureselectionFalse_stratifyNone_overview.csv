;model;mean;sd;specs
0;naive_bayes1;0.49352678571428577;0.04072495552546398;GaussianNB()
1;naive_bayes2;0.8028571428571428;0.0037120743760691694;MultinomialNB()
2;naive_bayes3;0.7611607142857142;0.004337484929103992;ComplementNB()
3;logistic_regression_1;0.8464732142857144;0.005094765220602561;LogisticRegression()
4;logistic_regression_after_gs;0.8462053571428572;0.005161996256986528;LogisticRegression(C=1, class_weight={0: 1.0, 1: 1.0}, random_state=0, solver='liblinear', verbose=False)
5;logistic_regression_after_rs;0.8486160714285713;0.005598007799791899;LogisticRegression(C=6, class_weight={0: 1.0, 1: 1.0}, multi_class='ovr', random_state=0, solver='saga', verbose=False)
6;knn_1;0.8245982142857144;0.00392857142857137;KNeighborsClassifier()
7;knn_after_gs;0.8297767857142857;0.003813242232868338;KNeighborsClassifier(algorithm='brute', n_neighbors=11)
8;bagging_knn;0.8237053571428572;0.005182033940964319;BaggingClassifier(base_estimator=KNeighborsClassifier(), random_state=0)
9;svc_1;0.8359821428571429;0.00622507786198332;SVC()
10;svc_after_gs;0.8359821428571429;0.00622507786198332;SVC(C=1, probability=True, random_state=0)
11;dt;0.8152232142857143;0.0016846394878672493;DecisionTreeClassifier()
12;random_forest;0.8458035714285714;0.003991480883438796;RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)
13;boosted_tree;0.8687946428571429;0.0046273780428035495;GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
14;boosted_tree_after_gs;0.8705803571428572;0.004520626621500675;GradientBoostingClassifier(max_depth=6, max_features='auto', min_impurity_decrease=0.1, min_samples_split=3, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)
15;adaboost;0.8583035714285714;0.003655265980439073;AdaBoostClassifier(random_state=5)
16;mlp;0.8481696428571428;0.003409849366772964;MLPClassifier(alpha=1e-06, early_stopping=True, max_iter=1000, random_state=0)
17;mlp_after_gs;0.8464285714285713;0.003246981526065718;MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)
18;ensemble1;0.8663839285714285;0.004329666734358693;VotingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], voting='soft')
19;ensemble2;;;
20;stacking1;0.8696875000000001;0.004769478723709576;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=LogisticRegression())
21;stacking2;0.8701785714285715;0.0041916766408234265;StackingClassifier(estimators=[('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0))], final_estimator=SVC())
22;stacking3;0.869955357142857;0.004510033457272139;StackingClassifier(estimators=[('rf', RandomForestClassifier(max_depth=6, n_estimators=500, n_jobs=-1, oob_score=True, random_state=42)), ('gbt', GradientBoostingClassifier(max_depth=7, max_features='auto', min_impurity_decrease=0.1, n_estimators=1000, n_iter_no_change=30, random_state=0, subsample=1, verbose=False)), ('mlp', MLPClassifier(activation='tanh', beta_2=0.8, early_stopping=True, hidden_layer_sizes=(50, 50, 50), learning_rate='adaptive', max_iter=1000, momentum=0.8, random_state=0)), ('knn', KNeighborsClassifier(algorithm='brute', n_neighbors=11))], final_estimator=SVC())
